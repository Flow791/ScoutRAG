"""
Pipeline d'automatisation pour ScoutRAG
R√©cup√®re les donn√©es, les traite et les stocke dans Qdrant
"""

import sys
import os
import json
import pandas as pd
import soccerdata as sd
from pathlib import Path
from sentence_transformers import SentenceTransformer
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct
from tqdm import tqdm
import time
from openai import OpenAI

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

import config

class ScoutRAGPipeline:
    """Pipeline complet pour automatiser la r√©cup√©ration et le stockage des donn√©es"""
    
    def __init__(self):
        """Initialise le pipeline"""
        self.data_dir = Path("../data")
        self.data_dir.mkdir(exist_ok=True)
        
        # Initialiser les clients
        self.openai_client = OpenAI(api_key=config.Config.OPENAI_API_KEY)
        self.qdrant_client = QdrantClient(url='localhost')
        self.embedding_model = SentenceTransformer("BAAI/bge-m3")
        
        # Configuration
        self.collection_name = 'ragscout_players'
        self.season = "2425"  # Saison 2024-2025
        
        print("üöÄ Pipeline ScoutRAG initialis√©")
    
    def step_1_scrape_data(self):
        """√âtape 1: R√©cup√©ration des donn√©es depuis FBref"""
        print("\nüìä √âtape 1: R√©cup√©ration des donn√©es FBref...")
        
        try:
            # Initialiser FBref
            fbref = sd.FBref(leagues="Big 5 European Leagues Combined", seasons=self.season)
            
            # Types de statistiques √† r√©cup√©rer
            stat_types = ['standard', 'shooting', 'passing', 'defense', 'possession', 'misc']
            dfs = []
            
            print("üìà R√©cup√©ration des statistiques...")
            for stat in tqdm(stat_types, desc="Statistiques"):
                df = fbref.read_player_season_stats(stat_type=stat)
                
                # Flatten des colonnes MultiIndex
                df.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in df.columns]
                
                # D√©finir les colonnes de jointure
                key_cols = [col for col in df.columns if any(k in col.lower() for k in ['player', 'season', 'team', 'comp'])]
                stat_cols = [col for col in df.columns if col not in key_cols]
                
                # Renommer les colonnes de stats
                df = df[key_cols + stat_cols]
                df = df.rename(columns={col: f"{col}_{stat}" for col in stat_cols})
                
                dfs.append(df)
            
            # Fusionner tous les DataFrames
            print("üîó Fusion des donn√©es...")
            df_merged = pd.DataFrame()
            
            for df_temp in dfs:
                df_temp = df_temp.reset_index()
                if df_merged.empty:
                    df_merged = df_temp
                else:
                    df_merged = pd.merge(df_merged, df_temp, how='left', on=['league', 'season', 'team', 'player'])
            
            # Nettoyer et sauvegarder
            df_players = df_merged.reset_index()
            df_players = df_players.fillna(0)
            
            # Sauvegarder les donn√©es brutes
            output_path = self.data_dir / "players_stats.csv"
            df_players.to_csv(output_path, index=False)
            
            print(f"‚úÖ Donn√©es sauvegard√©es: {output_path}")
            print(f"üìä {len(df_players)} joueurs r√©cup√©r√©s")
            
            return df_players
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            raise
    
    def step_2_generate_summaries(self, df_players):
        """√âtape 2: G√©n√©ration des r√©sum√©s de joueurs avec OpenAI"""
        print("\nü§ñ √âtape 2: G√©n√©ration des r√©sum√©s de joueurs...")
        
        # Charger les r√©sum√©s existants s'ils existent
        summaries_path = self.data_dir / "player_summaries.json"
        if summaries_path.exists():
            print("üìñ Chargement des r√©sum√©s existants...")
            with open(summaries_path, "r", encoding="utf-8") as f:
                existing_summaries = json.load(f)
        else:
            existing_summaries = {}
           
        if len(existing_summaries) > 1:
            print("üí° Des donn√©es anterieures sont fournies voulez-vous vraiment mettre √† jour ? (Dur√©e: ~4h)")
        
            response = input("Rafraichir les donn√©es maintenant ? (o/N): ").strip().lower()
            if response not in ['o', 'oui', 'y', 'yes']:
                return existing_summaries
        
        # Pr√©parer les donn√©es pour la g√©n√©ration
        players_to_process = []
        for _, row in df_players.iterrows():
            player_key = f"{row['player']} ({row['team']})"
            if player_key not in existing_summaries:
                print(player_key)
                players_to_process.append({
                    'player': row['player'],
                    'team': row['team'],
                    'position': row.get('pos__standard', 'Unknown'),
                    'stats': row.drop(exclude_columns).to_string()
                })
        
        
        exit()
        
        if not players_to_process:
            print("‚úÖ Tous les r√©sum√©s sont d√©j√† g√©n√©r√©s")
            return existing_summaries
        
        print(f"üîÑ G√©n√©ration de {len(players_to_process)} nouveaux r√©sum√©s...")
        
        # Prompt pour la g√©n√©ration de r√©sum√©s
        exclude_columns = ['season', 'team', 'player', 'nation__standard', 'age__standard', 'born__standard', 'nation__shooting', 'pos__shooting', 'age__shooting', 'born__shooting', 'nation__passing', 'pos__passing', 'age__passing', 'born__passing', 'nation__defense', 'pos__defense', 'age__defense', 'born__defense', 'nation__possession', 'pos__possession', 'age__possession', 'born__possession', 'nation__misc', 'pos__misc', 'age__misc', 'born__misc']
        
        summary_prompt = """
        Tu es un expert en scouting football, analyste football sp√©cialis√© en scouting bas√© sur les donn√©es.
        
        Tu vas recevoir les statistiques d√©taill√©es d‚Äôun joueur professionnel.  
        √Ä partir de ces donn√©es, r√©dige une **fiche de scouting compl√®te, claire et neutre**, destin√©e √† alimenter une base de recherche intelligente.

        ---

        ### üéØ Objectif du texte :
        Identifier avec pr√©cision :
        - le **r√¥le du joueur** (poste et sous-r√¥le)
        - son **style de jeu** (comportement avec et sans ballon)
        - ses **principales qualit√©s**
        - ses **axes d'am√©lioration**
        - son **profil-type** en fin de texte

        Le r√©sum√© doit permettre √† un recruteur ou analyste d‚Äôavoir une **vision rapide mais fiable** du profil du joueur.

        ---
        
        ### ‚úçÔ∏è Structure attendue (fluide, sans titres ni bullets) :

        1. **Style de jeu et r√¥le** :  
        D√©cris le poste principal (DF, MF, FW‚Ä¶) et si possible, deduis des stats disponibles, le sous-r√¥le (ex : lat√©ral offensif, milieu r√©cup√©rateur, attaquant mobile).  
        Mentionne comment il √©volue : projections, appels, conservation, pressing, largeur, implication d√©fensive‚Ä¶  
        Base-toi uniquement sur les statistiques fournies.

        2. **Qualit√©s principales** :  
        Regroupe par cat√©gories :
        - **Physique** : volume de jeu, duels gagn√©s, pr√©sence, mobilit√©‚Ä¶
        - **Technique** : types de passes, cr√©ativit√©, conduite, finition, dribbles‚Ä¶
        - **Mental/tactique** : implication, pressing, discipline, concentration‚Ä¶

        3. **Axes d'am√©lioration** :  
        Exprime de mani√®re neutre les domaines o√π il est moins √† l‚Äôaise ou peut progresser.  
        Utilise des tournures comme ‚Äúgagnerait √† am√©liorer‚Ä¶‚Äù, ‚Äúpeut encore progresser sur‚Ä¶‚Äù, ‚Äúmontre quelques limites dans‚Ä¶‚Äù

        4. **Profil-type** :  
        Termine toujours par une ligne :  
        **Profil-type :** suivi d‚Äôune expression courte (3 √† 6 mots) qui r√©sume son profil.  
        (ex : ‚ÄúMilieu d√©fensif intense‚Äù, ‚ÄúD√©fenseur axial sobre et solide‚Äù, ‚ÄúAilier percutant et cr√©atif‚Äù)

        ---

        ### ‚ö†Ô∏è Contraintes essentielles :

        - **Ne fais aucune d√©duction** √† partir de donn√©es absentes (taille, puissance, nationalit√©, √¢ge, etc.)
        - **N'invente jamais** une information
        - Ne donne aucun chiffre, pourcentage ou ratio
        - Texte fluide, sans bullet points, environ 6 √† 8 phrases
        - Ne mentionne jamais le nom, le club, la ligue ou la nationalit√© du joueur

        ---
        
        IMPORTANT :
        - Ne d√©duis ni n‚Äôinvente aucune donn√©e.
        - Si une information n‚Äôest pas pr√©sente dans les statistiques (comme la taille, la vitesse, la puissance, etc.), **n‚Äôen parle pas**.
        - Reste strictement fid√®le aux donn√©es fournies.

        Voici les donn√©es du joueur :
        {stats}

        R√©sum√©:
        """
        
        new_summaries = {}
        for player_data in tqdm(players_to_process, desc="G√©n√©ration r√©sum√©s"):
            try:
                # Pr√©parer les statistiques pour le prompt
                stats_text = "\n".join([f"{k}: {v}" for k, v in player_data['stats'].items() 
                                       if k not in ['player', 'team', 'league', 'season'] and v != 0])
                
                prompt = summary_prompt.format(stats=stats_text)
                
                # G√©n√©rer le r√©sum√©
                response = self.openai_client.chat.completions.create(
                    model=config.Config.OPENAI_MODEL,
                    messages=[
                        {"role": "system", "content": "Tu es un expert en analyse footballistique."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    max_tokens=500
                )
                
                summary = response.choices[0].message.content.strip()
                player_key = f"{player_data['player']} ({player_data['team']})"
                new_summaries[player_key] = summary
                
                # Pause pour √©viter de d√©passer les limites API
                time.sleep(0.5)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur pour {player_data['player']}: {e}")
                continue
        
        # Fusionner avec les r√©sum√©s existants
        all_summaries = {**existing_summaries, **new_summaries}
        
        # Sauvegarder
        with open(summaries_path, "w", encoding="utf-8") as f:
            json.dump(all_summaries, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ {len(new_summaries)} nouveaux r√©sum√©s g√©n√©r√©s")
        print(f"üìù Total: {len(all_summaries)} r√©sum√©s")
        
        return all_summaries
    
    def step_3_prepare_data(self, df_players, summaries):
        """√âtape 3: Pr√©paration des donn√©es pour Qdrant"""
        print("\nüîß √âtape 3: Pr√©paration des donn√©es...")
        
        # Cr√©er DataFrame des r√©sum√©s
        df_summaries = pd.DataFrame([
            {
                'player': player.split('(')[0].strip(), 
                'team': player.split('(')[1].replace(')', '').strip(), 
                'summary': summary
            } 
            for player, summary in summaries.items()
        ])
        
        # Fusionner avec les statistiques
        df_merged = df_summaries.merge(df_players, how='left', on=['player', 'team'])
        
        # S√©lectionner les colonnes importantes
        df_final = df_merged[[
            'league', 'season', 'player', 'team', 'pos__standard', 'summary'
        ]].copy()
        
        df_final.rename(columns={'pos__standard': 'position'}, inplace=True)
        df_final = df_final.dropna(subset=['summary'])  # Supprimer les lignes sans r√©sum√©
        
        print(f"‚úÖ {len(df_final)} joueurs pr√©par√©s pour Qdrant")
        
        return df_final
    
    def step_4_setup_qdrant(self):
        """√âtape 4: Configuration de Qdrant"""
        print("\nüóÑÔ∏è √âtape 4: Configuration de Qdrant...")
        
        # V√©rifier si la collection existe
        if self.qdrant_client.collection_exists(self.collection_name):
            print(f"üóëÔ∏è Suppression de la collection existante: {self.collection_name}")
            self.qdrant_client.delete_collection(self.collection_name)
        
        # Cr√©er la nouvelle collection
        print(f"üì¶ Cr√©ation de la collection: {self.collection_name}")
        self.qdrant_client.create_collection(
            collection_name=self.collection_name,
            vectors_config=VectorParams(
                size=1024,  # Taille des embeddings BAAI/bge-m3
                distance=Distance.COSINE
            )
        )
        
        print("‚úÖ Collection Qdrant configur√©e")
    
    def step_5_store_embeddings(self, df_final):
        """√âtape 5: Stockage des embeddings dans Qdrant"""
        print("\nüíæ √âtape 5: Stockage des embeddings...")
        
        points = []
        print("üîÑ G√©n√©ration des embeddings...")
        
        for idx, row in tqdm(df_final.iterrows(), total=len(df_final), desc="Embeddings"):
            try:
                # G√©n√©rer l'embedding
                embedding = self.embedding_model.encode(row['summary']).tolist()
                
                # Pr√©parer les m√©tadonn√©es
                metadata = {
                    'season': row['season'],
                    'player': row['player'],
                    'league': row['league'],
                    'team': row['team'],
                    'position': row['position'],
                    'summary': row['summary']
                }
                
                # Cr√©er le point
                point = PointStruct(
                    id=idx,
                    vector=embedding,
                    payload=metadata
                )
                
                points.append(point)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur pour {row['player']}: {e}")
                continue
        
        # Ins√©rer par batch
        BATCH_SIZE = 100
        print("üì§ Insertion dans Qdrant...")
        
        for i in tqdm(range(0, len(points), BATCH_SIZE), desc="Insertion"):
            batch = points[i:i + BATCH_SIZE]
            self.qdrant_client.upsert(
                collection_name=self.collection_name, 
                points=batch
            )
        
        print(f"‚úÖ {len(points)} joueurs ins√©r√©s dans Qdrant")
    
    def run_full_pipeline(self):
        """Ex√©cute le pipeline complet"""
        print("üéØ D√©marrage du pipeline ScoutRAG complet")
        print("=" * 50)
        
        start_time = time.time()
        
        try:
            # √âtape 1: R√©cup√©ration des donn√©es
            df_players = self.step_1_scrape_data()
            
            # √âtape 2: G√©n√©ration des r√©sum√©s
            summaries = self.step_2_generate_summaries(df_players)
            
            # √âtape 3: Pr√©paration des donn√©es
            df_final = self.step_3_prepare_data(df_players, summaries)
            
            # √âtape 4: Configuration de Qdrant
            self.step_4_setup_qdrant()
            
            # √âtape 5: Stockage des embeddings
            self.step_5_store_embeddings(df_final)
            
            # R√©sum√© final
            end_time = time.time()
            duration = end_time - start_time
            
            print("\n" + "=" * 50)
            print("üéâ Pipeline termin√© avec succ√®s !")
            print(f"‚è±Ô∏è Dur√©e totale: {duration:.2f} secondes")
            print(f"üìä {len(df_final)} joueurs trait√©s")
            print(f"üóÑÔ∏è Collection Qdrant: {self.collection_name}")
            print("üöÄ L'application Gradio est pr√™te √† √™tre utilis√©e !")
            
        except Exception as e:
            print(f"\n‚ùå Erreur dans le pipeline: {e}")
            raise

def main():
    """Fonction principale"""
    try:
        # Valider la configuration
        config.Config.validate()
        
        # Cr√©er et ex√©cuter le pipeline
        pipeline = ScoutRAGPipeline()
        pipeline.run_full_pipeline()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
